
MyScheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000898  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000a5c  08000a5c  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000a5c  08000a5c  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08000a5c  08000a5c  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a5c  08000a5c  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a5c  08000a5c  00010a5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000a60  08000a60  00010a60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08000a64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  20000024  08000a88  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  08000a88  00020094  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000166b  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000052d  00000000  00000000  000216bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001a0  00000000  00000000  00021bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000158  00000000  00000000  00021d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000020af  00000000  00000000  00021ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000018b4  00000000  00000000  00023f97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000932d  00000000  00000000  0002584b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0002eb78  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000004f0  00000000  00000000  0002ebc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000024 	.word	0x20000024
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000a44 	.word	0x08000a44

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000028 	.word	0x20000028
 8000200:	08000a44 	.word	0x08000a44

08000204 <GPIO_u8PinInit>:
 * @brief the function initializes the GPIO pin according to the input parameters
 * @param[in] PinConfig : the initialization values of the pin
 * @retval Error Status
 */
uint8_t GPIO_u8PinInit(const GPIO_PinConfig_t* PinConfig)
{
 8000204:	b480      	push	{r7}
 8000206:	b085      	sub	sp, #20
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
	uint8_t Local_u8ErrorState = OK;
 800020c:	2300      	movs	r3, #0
 800020e:	73fb      	strb	r3, [r7, #15]
	if(PinConfig!=NULL)
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	2b00      	cmp	r3, #0
 8000214:	f000 8117 	beq.w	8000446 <GPIO_u8PinInit+0x242>
	{
		if(((PinConfig->port) <= PORTH)&&((PinConfig->pin)<=PIN15))
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	781b      	ldrb	r3, [r3, #0]
 800021c:	2b07      	cmp	r3, #7
 800021e:	f200 810f 	bhi.w	8000440 <GPIO_u8PinInit+0x23c>
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	785b      	ldrb	r3, [r3, #1]
 8000226:	2b0f      	cmp	r3, #15
 8000228:	f200 810a 	bhi.w	8000440 <GPIO_u8PinInit+0x23c>
		{
			/*Slect GPIO modes : Input , Output , */
			(GPIO_PORT[PinConfig->port]->GPIO_MODER) &=~(MODER_MASK       <<((PinConfig->pin) * MODE_PIN_ACCESS)); /*Clear the mode bits */
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	781b      	ldrb	r3, [r3, #0]
 8000230:	461a      	mov	r2, r3
 8000232:	4b8a      	ldr	r3, [pc, #552]	; (800045c <GPIO_u8PinInit+0x258>)
 8000234:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000238:	681a      	ldr	r2, [r3, #0]
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	785b      	ldrb	r3, [r3, #1]
 800023e:	005b      	lsls	r3, r3, #1
 8000240:	2103      	movs	r1, #3
 8000242:	fa01 f303 	lsl.w	r3, r1, r3
 8000246:	43db      	mvns	r3, r3
 8000248:	4619      	mov	r1, r3
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	781b      	ldrb	r3, [r3, #0]
 800024e:	4618      	mov	r0, r3
 8000250:	4b82      	ldr	r3, [pc, #520]	; (800045c <GPIO_u8PinInit+0x258>)
 8000252:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000256:	400a      	ands	r2, r1
 8000258:	601a      	str	r2, [r3, #0]
			(GPIO_PORT[PinConfig->port]->GPIO_MODER) |=((PinConfig->mode) <<((PinConfig->pin) * MODE_PIN_ACCESS));
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	461a      	mov	r2, r3
 8000260:	4b7e      	ldr	r3, [pc, #504]	; (800045c <GPIO_u8PinInit+0x258>)
 8000262:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000266:	681a      	ldr	r2, [r3, #0]
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	789b      	ldrb	r3, [r3, #2]
 800026c:	4619      	mov	r1, r3
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	785b      	ldrb	r3, [r3, #1]
 8000272:	005b      	lsls	r3, r3, #1
 8000274:	fa01 f303 	lsl.w	r3, r1, r3
 8000278:	4619      	mov	r1, r3
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	781b      	ldrb	r3, [r3, #0]
 800027e:	4618      	mov	r0, r3
 8000280:	4b76      	ldr	r3, [pc, #472]	; (800045c <GPIO_u8PinInit+0x258>)
 8000282:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000286:	430a      	orrs	r2, r1
 8000288:	601a      	str	r2, [r3, #0]
			/*Slect GPIO modes : NoPull , PullUp or PullDown */
			(GPIO_PORT[PinConfig->port]->GPIO_PUPDR) &=~(PUPDR_MASK            <<((PinConfig->pin) * PUPDR_PIN_ACCESS));
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	781b      	ldrb	r3, [r3, #0]
 800028e:	461a      	mov	r2, r3
 8000290:	4b72      	ldr	r3, [pc, #456]	; (800045c <GPIO_u8PinInit+0x258>)
 8000292:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000296:	68da      	ldr	r2, [r3, #12]
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	785b      	ldrb	r3, [r3, #1]
 800029c:	005b      	lsls	r3, r3, #1
 800029e:	2103      	movs	r1, #3
 80002a0:	fa01 f303 	lsl.w	r3, r1, r3
 80002a4:	43db      	mvns	r3, r3
 80002a6:	4619      	mov	r1, r3
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	781b      	ldrb	r3, [r3, #0]
 80002ac:	4618      	mov	r0, r3
 80002ae:	4b6b      	ldr	r3, [pc, #428]	; (800045c <GPIO_u8PinInit+0x258>)
 80002b0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80002b4:	400a      	ands	r2, r1
 80002b6:	60da      	str	r2, [r3, #12]
			(GPIO_PORT[PinConfig->port]->GPIO_PUPDR) |=((PinConfig->PullType) <<((PinConfig->pin) * PUPDR_PIN_ACCESS));
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	781b      	ldrb	r3, [r3, #0]
 80002bc:	461a      	mov	r2, r3
 80002be:	4b67      	ldr	r3, [pc, #412]	; (800045c <GPIO_u8PinInit+0x258>)
 80002c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80002c4:	68da      	ldr	r2, [r3, #12]
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	795b      	ldrb	r3, [r3, #5]
 80002ca:	4619      	mov	r1, r3
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	785b      	ldrb	r3, [r3, #1]
 80002d0:	005b      	lsls	r3, r3, #1
 80002d2:	fa01 f303 	lsl.w	r3, r1, r3
 80002d6:	4619      	mov	r1, r3
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	781b      	ldrb	r3, [r3, #0]
 80002dc:	4618      	mov	r0, r3
 80002de:	4b5f      	ldr	r3, [pc, #380]	; (800045c <GPIO_u8PinInit+0x258>)
 80002e0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80002e4:	430a      	orrs	r2, r1
 80002e6:	60da      	str	r2, [r3, #12]
			/*Slect Output Type & Output speed in case of General purpose output or Alternate function */
			if(((PinConfig->mode)==OUTPUT)||((PinConfig->mode)==ALTERNATE_FUNCTION))
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	789b      	ldrb	r3, [r3, #2]
 80002ec:	2b01      	cmp	r3, #1
 80002ee:	d004      	beq.n	80002fa <GPIO_u8PinInit+0xf6>
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	789b      	ldrb	r3, [r3, #2]
 80002f4:	2b02      	cmp	r3, #2
 80002f6:	f040 80a9 	bne.w	800044c <GPIO_u8PinInit+0x248>
			{
				/*Slect Output type : Push Pull or Open drain*/
				(GPIO_PORT[PinConfig->port]->GPIO_OTYPER) &=~(OTYPER_MASK         	<<(PinConfig->pin)); //bit masking
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	781b      	ldrb	r3, [r3, #0]
 80002fe:	461a      	mov	r2, r3
 8000300:	4b56      	ldr	r3, [pc, #344]	; (800045c <GPIO_u8PinInit+0x258>)
 8000302:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000306:	685a      	ldr	r2, [r3, #4]
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	785b      	ldrb	r3, [r3, #1]
 800030c:	4619      	mov	r1, r3
 800030e:	2301      	movs	r3, #1
 8000310:	408b      	lsls	r3, r1
 8000312:	43db      	mvns	r3, r3
 8000314:	4619      	mov	r1, r3
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	781b      	ldrb	r3, [r3, #0]
 800031a:	4618      	mov	r0, r3
 800031c:	4b4f      	ldr	r3, [pc, #316]	; (800045c <GPIO_u8PinInit+0x258>)
 800031e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000322:	400a      	ands	r2, r1
 8000324:	605a      	str	r2, [r3, #4]
				(GPIO_PORT[PinConfig->port]->GPIO_OTYPER) |=((PinConfig->PullType) 	<<(PinConfig->pin));
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	781b      	ldrb	r3, [r3, #0]
 800032a:	461a      	mov	r2, r3
 800032c:	4b4b      	ldr	r3, [pc, #300]	; (800045c <GPIO_u8PinInit+0x258>)
 800032e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000332:	685a      	ldr	r2, [r3, #4]
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	795b      	ldrb	r3, [r3, #5]
 8000338:	4619      	mov	r1, r3
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	785b      	ldrb	r3, [r3, #1]
 800033e:	fa01 f303 	lsl.w	r3, r1, r3
 8000342:	4619      	mov	r1, r3
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	781b      	ldrb	r3, [r3, #0]
 8000348:	4618      	mov	r0, r3
 800034a:	4b44      	ldr	r3, [pc, #272]	; (800045c <GPIO_u8PinInit+0x258>)
 800034c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000350:	430a      	orrs	r2, r1
 8000352:	605a      	str	r2, [r3, #4]
				/*Slect Output speed : Low, Medium, Fast or High*/
				(GPIO_PORT[PinConfig->port]->GPIO_OSPEEDR) &=~(OSPEEDR_MASK             <<((PinConfig->pin) *OSPEEDR_PIN_ACCESS));
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	781b      	ldrb	r3, [r3, #0]
 8000358:	461a      	mov	r2, r3
 800035a:	4b40      	ldr	r3, [pc, #256]	; (800045c <GPIO_u8PinInit+0x258>)
 800035c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000360:	689a      	ldr	r2, [r3, #8]
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	785b      	ldrb	r3, [r3, #1]
 8000366:	005b      	lsls	r3, r3, #1
 8000368:	2103      	movs	r1, #3
 800036a:	fa01 f303 	lsl.w	r3, r1, r3
 800036e:	43db      	mvns	r3, r3
 8000370:	4619      	mov	r1, r3
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	781b      	ldrb	r3, [r3, #0]
 8000376:	4618      	mov	r0, r3
 8000378:	4b38      	ldr	r3, [pc, #224]	; (800045c <GPIO_u8PinInit+0x258>)
 800037a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800037e:	400a      	ands	r2, r1
 8000380:	609a      	str	r2, [r3, #8]
				(GPIO_PORT[PinConfig->port]->GPIO_OSPEEDR) |=((PinConfig->speed)		   <<((PinConfig->pin) *OSPEEDR_PIN_ACCESS));
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	781b      	ldrb	r3, [r3, #0]
 8000386:	461a      	mov	r2, r3
 8000388:	4b34      	ldr	r3, [pc, #208]	; (800045c <GPIO_u8PinInit+0x258>)
 800038a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800038e:	689a      	ldr	r2, [r3, #8]
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	78db      	ldrb	r3, [r3, #3]
 8000394:	4619      	mov	r1, r3
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	785b      	ldrb	r3, [r3, #1]
 800039a:	005b      	lsls	r3, r3, #1
 800039c:	fa01 f303 	lsl.w	r3, r1, r3
 80003a0:	4619      	mov	r1, r3
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	781b      	ldrb	r3, [r3, #0]
 80003a6:	4618      	mov	r0, r3
 80003a8:	4b2c      	ldr	r3, [pc, #176]	; (800045c <GPIO_u8PinInit+0x258>)
 80003aa:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80003ae:	430a      	orrs	r2, r1
 80003b0:	609a      	str	r2, [r3, #8]

				/*Slect the pin Alternate function*/
				if((PinConfig->mode)==ALTERNATE_FUNCTION)
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	789b      	ldrb	r3, [r3, #2]
 80003b6:	2b02      	cmp	r3, #2
 80003b8:	d148      	bne.n	800044c <GPIO_u8PinInit+0x248>
				{
					uint8_t Local_u8RegNum = (PinConfig->pin) /AFR_PIN_SHIFTING;
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	785b      	ldrb	r3, [r3, #1]
 80003be:	08db      	lsrs	r3, r3, #3
 80003c0:	73bb      	strb	r3, [r7, #14]
					uint8_t Local_u8BitNum = (PinConfig->pin) %AFR_PIN_SHIFTING;
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	785b      	ldrb	r3, [r3, #1]
 80003c6:	f003 0307 	and.w	r3, r3, #7
 80003ca:	737b      	strb	r3, [r7, #13]

					(GPIO_PORT[PinConfig->port]->GPIO_AFR[Local_u8RegNum]) &=~(AFR_MASK            <<(Local_u8BitNum*AFR_PIN_ACCESS));
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	781b      	ldrb	r3, [r3, #0]
 80003d0:	461a      	mov	r2, r3
 80003d2:	4b22      	ldr	r3, [pc, #136]	; (800045c <GPIO_u8PinInit+0x258>)
 80003d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80003d8:	7bba      	ldrb	r2, [r7, #14]
 80003da:	3208      	adds	r2, #8
 80003dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80003e0:	7b7b      	ldrb	r3, [r7, #13]
 80003e2:	009b      	lsls	r3, r3, #2
 80003e4:	220f      	movs	r2, #15
 80003e6:	fa02 f303 	lsl.w	r3, r2, r3
 80003ea:	43db      	mvns	r3, r3
 80003ec:	4618      	mov	r0, r3
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	781b      	ldrb	r3, [r3, #0]
 80003f2:	461a      	mov	r2, r3
 80003f4:	4b19      	ldr	r3, [pc, #100]	; (800045c <GPIO_u8PinInit+0x258>)
 80003f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80003fa:	7bba      	ldrb	r2, [r7, #14]
 80003fc:	4001      	ands	r1, r0
 80003fe:	3208      	adds	r2, #8
 8000400:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
					(GPIO_PORT[PinConfig->port]->GPIO_AFR[Local_u8RegNum]) |=((PinConfig->AltFunc) <<(Local_u8BitNum*AFR_PIN_ACCESS));
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	781b      	ldrb	r3, [r3, #0]
 8000408:	461a      	mov	r2, r3
 800040a:	4b14      	ldr	r3, [pc, #80]	; (800045c <GPIO_u8PinInit+0x258>)
 800040c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000410:	7bba      	ldrb	r2, [r7, #14]
 8000412:	3208      	adds	r2, #8
 8000414:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	799b      	ldrb	r3, [r3, #6]
 800041c:	461a      	mov	r2, r3
 800041e:	7b7b      	ldrb	r3, [r7, #13]
 8000420:	009b      	lsls	r3, r3, #2
 8000422:	fa02 f303 	lsl.w	r3, r2, r3
 8000426:	4618      	mov	r0, r3
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	461a      	mov	r2, r3
 800042e:	4b0b      	ldr	r3, [pc, #44]	; (800045c <GPIO_u8PinInit+0x258>)
 8000430:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000434:	7bba      	ldrb	r2, [r7, #14]
 8000436:	4301      	orrs	r1, r0
 8000438:	3208      	adds	r2, #8
 800043a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			if(((PinConfig->mode)==OUTPUT)||((PinConfig->mode)==ALTERNATE_FUNCTION))
 800043e:	e005      	b.n	800044c <GPIO_u8PinInit+0x248>
				}
			}
		}
		else
		{
			Local_u8ErrorState = NOK;
 8000440:	2301      	movs	r3, #1
 8000442:	73fb      	strb	r3, [r7, #15]
 8000444:	e003      	b.n	800044e <GPIO_u8PinInit+0x24a>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
 8000446:	2302      	movs	r3, #2
 8000448:	73fb      	strb	r3, [r7, #15]
 800044a:	e000      	b.n	800044e <GPIO_u8PinInit+0x24a>
			if(((PinConfig->mode)==OUTPUT)||((PinConfig->mode)==ALTERNATE_FUNCTION))
 800044c:	bf00      	nop
	}
	return  Local_u8ErrorState ;
 800044e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000450:	4618      	mov	r0, r3
 8000452:	3714      	adds	r7, #20
 8000454:	46bd      	mov	sp, r7
 8000456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045a:	4770      	bx	lr
 800045c:	20000000 	.word	0x20000000

08000460 <GPIO_u8TogglePinValue>:
	}
	return  Local_u8ErrorState ;

}
uint8_t GPIO_u8TogglePinValue(Port_t Port,Pin_t PinNumber)
{
 8000460:	b480      	push	{r7}
 8000462:	b085      	sub	sp, #20
 8000464:	af00      	add	r7, sp, #0
 8000466:	4603      	mov	r3, r0
 8000468:	460a      	mov	r2, r1
 800046a:	71fb      	strb	r3, [r7, #7]
 800046c:	4613      	mov	r3, r2
 800046e:	71bb      	strb	r3, [r7, #6]
	uint8_t Local_u8ErrorState = OK;
 8000470:	2300      	movs	r3, #0
 8000472:	73fb      	strb	r3, [r7, #15]
	if((Port <= PORTH)&&(PinNumber<=PIN15))
 8000474:	79fb      	ldrb	r3, [r7, #7]
 8000476:	2b07      	cmp	r3, #7
 8000478:	d813      	bhi.n	80004a2 <GPIO_u8TogglePinValue+0x42>
 800047a:	79bb      	ldrb	r3, [r7, #6]
 800047c:	2b0f      	cmp	r3, #15
 800047e:	d810      	bhi.n	80004a2 <GPIO_u8TogglePinValue+0x42>
	{
		(GPIO_PORT[Port]->GPIO_ODR) ^=(ONE_BIT_MASK << PinNumber);
 8000480:	79fb      	ldrb	r3, [r7, #7]
 8000482:	4a0c      	ldr	r2, [pc, #48]	; (80004b4 <GPIO_u8TogglePinValue+0x54>)
 8000484:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000488:	695a      	ldr	r2, [r3, #20]
 800048a:	79bb      	ldrb	r3, [r7, #6]
 800048c:	2101      	movs	r1, #1
 800048e:	fa01 f303 	lsl.w	r3, r1, r3
 8000492:	4618      	mov	r0, r3
 8000494:	79fb      	ldrb	r3, [r7, #7]
 8000496:	4907      	ldr	r1, [pc, #28]	; (80004b4 <GPIO_u8TogglePinValue+0x54>)
 8000498:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800049c:	4042      	eors	r2, r0
 800049e:	615a      	str	r2, [r3, #20]
 80004a0:	e001      	b.n	80004a6 <GPIO_u8TogglePinValue+0x46>
	}
	else
	{
		Local_u8ErrorState = NOK;
 80004a2:	2301      	movs	r3, #1
 80004a4:	73fb      	strb	r3, [r7, #15]
	}
	return  Local_u8ErrorState ;
 80004a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80004a8:	4618      	mov	r0, r3
 80004aa:	3714      	adds	r7, #20
 80004ac:	46bd      	mov	sp, r7
 80004ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b2:	4770      	bx	lr
 80004b4:	20000000 	.word	0x20000000

080004b8 <InitTasksStack>:
uint8_t CurrenTask=1U;/*Starting from 1*/
#define SET_PENDSV_PENDING_FLAG			((SCB->SCB_ICSR)|=(0b1<<28) )
#define CLEAR_PENDSV_PENDING_FLAG		((SCB->SCB_ICSR)|=(0b1<<27) )

void InitTasksStack(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b083      	sub	sp, #12
 80004bc:	af00      	add	r7, sp, #0
	uint32_t * Local_TASK_PSP;
	uint8_t Local_countre1,Local_countre2;

	UserTasks[0].PSPValue = IDLE_TASK_STACK_STARTE;
 80004be:	4b35      	ldr	r3, [pc, #212]	; (8000594 <InitTasksStack+0xdc>)
 80004c0:	4a35      	ldr	r2, [pc, #212]	; (8000598 <InitTasksStack+0xe0>)
 80004c2:	601a      	str	r2, [r3, #0]
	UserTasks[1].PSPValue = T1_STACK_START;
 80004c4:	4b33      	ldr	r3, [pc, #204]	; (8000594 <InitTasksStack+0xdc>)
 80004c6:	4a35      	ldr	r2, [pc, #212]	; (800059c <InitTasksStack+0xe4>)
 80004c8:	611a      	str	r2, [r3, #16]
	UserTasks[2].PSPValue = T2_STACK_START;
 80004ca:	4b32      	ldr	r3, [pc, #200]	; (8000594 <InitTasksStack+0xdc>)
 80004cc:	4a34      	ldr	r2, [pc, #208]	; (80005a0 <InitTasksStack+0xe8>)
 80004ce:	621a      	str	r2, [r3, #32]
	UserTasks[3].PSPValue = T3_STACK_START;
 80004d0:	4b30      	ldr	r3, [pc, #192]	; (8000594 <InitTasksStack+0xdc>)
 80004d2:	4a34      	ldr	r2, [pc, #208]	; (80005a4 <InitTasksStack+0xec>)
 80004d4:	631a      	str	r2, [r3, #48]	; 0x30
	UserTasks[4].PSPValue = T4_STACK_START;
 80004d6:	4b2f      	ldr	r3, [pc, #188]	; (8000594 <InitTasksStack+0xdc>)
 80004d8:	4a33      	ldr	r2, [pc, #204]	; (80005a8 <InitTasksStack+0xf0>)
 80004da:	641a      	str	r2, [r3, #64]	; 0x40

	/**/
	UserTasks[0].TaskHandler=&IdleTaskHandler;
 80004dc:	4b2d      	ldr	r3, [pc, #180]	; (8000594 <InitTasksStack+0xdc>)
 80004de:	4a33      	ldr	r2, [pc, #204]	; (80005ac <InitTasksStack+0xf4>)
 80004e0:	60da      	str	r2, [r3, #12]
	UserTasks[1].TaskHandler=&Task1_Handler;
 80004e2:	4b2c      	ldr	r3, [pc, #176]	; (8000594 <InitTasksStack+0xdc>)
 80004e4:	4a32      	ldr	r2, [pc, #200]	; (80005b0 <InitTasksStack+0xf8>)
 80004e6:	61da      	str	r2, [r3, #28]
	UserTasks[2].TaskHandler=&Task2_Handler;
 80004e8:	4b2a      	ldr	r3, [pc, #168]	; (8000594 <InitTasksStack+0xdc>)
 80004ea:	4a32      	ldr	r2, [pc, #200]	; (80005b4 <InitTasksStack+0xfc>)
 80004ec:	62da      	str	r2, [r3, #44]	; 0x2c
	UserTasks[3].TaskHandler=&Task3_Handler;
 80004ee:	4b29      	ldr	r3, [pc, #164]	; (8000594 <InitTasksStack+0xdc>)
 80004f0:	4a31      	ldr	r2, [pc, #196]	; (80005b8 <InitTasksStack+0x100>)
 80004f2:	63da      	str	r2, [r3, #60]	; 0x3c
	UserTasks[4].TaskHandler=&Task4_Handler;
 80004f4:	4b27      	ldr	r3, [pc, #156]	; (8000594 <InitTasksStack+0xdc>)
 80004f6:	4a31      	ldr	r2, [pc, #196]	; (80005bc <InitTasksStack+0x104>)
 80004f8:	64da      	str	r2, [r3, #76]	; 0x4c

	for(Local_countre1=0;Local_countre1<MAX_TASK_NUM;Local_countre1++)
 80004fa:	2300      	movs	r3, #0
 80004fc:	70fb      	strb	r3, [r7, #3]
 80004fe:	e03e      	b.n	800057e <InitTasksStack+0xc6>
	{
		/*Init tasks as ready*/
		UserTasks[Local_countre1].CurrentState = Ready_State;
 8000500:	78fb      	ldrb	r3, [r7, #3]
 8000502:	4a24      	ldr	r2, [pc, #144]	; (8000594 <InitTasksStack+0xdc>)
 8000504:	011b      	lsls	r3, r3, #4
 8000506:	4413      	add	r3, r2
 8000508:	3308      	adds	r3, #8
 800050a:	2200      	movs	r2, #0
 800050c:	701a      	strb	r2, [r3, #0]
		Local_TASK_PSP=(uint32_t*)UserTasks[Local_countre1].PSPValue;
 800050e:	78fb      	ldrb	r3, [r7, #3]
 8000510:	4a20      	ldr	r2, [pc, #128]	; (8000594 <InitTasksStack+0xdc>)
 8000512:	011b      	lsls	r3, r3, #4
 8000514:	4413      	add	r3, r2
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	607b      	str	r3, [r7, #4]
		Local_TASK_PSP--;
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	3b04      	subs	r3, #4
 800051e:	607b      	str	r3, [r7, #4]
		*Local_TASK_PSP =DUMMY_XPSR;
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000526:	601a      	str	r2, [r3, #0]
		Local_TASK_PSP--;
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	3b04      	subs	r3, #4
 800052c:	607b      	str	r3, [r7, #4]
		*Local_TASK_PSP =UserTasks[Local_countre1].TaskHandler;
 800052e:	78fb      	ldrb	r3, [r7, #3]
 8000530:	4a18      	ldr	r2, [pc, #96]	; (8000594 <InitTasksStack+0xdc>)
 8000532:	011b      	lsls	r3, r3, #4
 8000534:	4413      	add	r3, r2
 8000536:	330c      	adds	r3, #12
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	461a      	mov	r2, r3
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	601a      	str	r2, [r3, #0]
		Local_TASK_PSP--;
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	3b04      	subs	r3, #4
 8000544:	607b      	str	r3, [r7, #4]
		*Local_TASK_PSP =DUMMY_LR;
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	f06f 0202 	mvn.w	r2, #2
 800054c:	601a      	str	r2, [r3, #0]
		for(Local_countre2=0;Local_countre2<13;Local_countre2++)
 800054e:	2300      	movs	r3, #0
 8000550:	70bb      	strb	r3, [r7, #2]
 8000552:	e008      	b.n	8000566 <InitTasksStack+0xae>
		{

			Local_TASK_PSP--;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	3b04      	subs	r3, #4
 8000558:	607b      	str	r3, [r7, #4]
			*Local_TASK_PSP =0;
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	2200      	movs	r2, #0
 800055e:	601a      	str	r2, [r3, #0]
		for(Local_countre2=0;Local_countre2<13;Local_countre2++)
 8000560:	78bb      	ldrb	r3, [r7, #2]
 8000562:	3301      	adds	r3, #1
 8000564:	70bb      	strb	r3, [r7, #2]
 8000566:	78bb      	ldrb	r3, [r7, #2]
 8000568:	2b0c      	cmp	r3, #12
 800056a:	d9f3      	bls.n	8000554 <InitTasksStack+0x9c>
		}
		UserTasks[Local_countre1].PSPValue=(uint32_t)(Local_TASK_PSP);
 800056c:	78fb      	ldrb	r3, [r7, #3]
 800056e:	687a      	ldr	r2, [r7, #4]
 8000570:	4908      	ldr	r1, [pc, #32]	; (8000594 <InitTasksStack+0xdc>)
 8000572:	011b      	lsls	r3, r3, #4
 8000574:	440b      	add	r3, r1
 8000576:	601a      	str	r2, [r3, #0]
	for(Local_countre1=0;Local_countre1<MAX_TASK_NUM;Local_countre1++)
 8000578:	78fb      	ldrb	r3, [r7, #3]
 800057a:	3301      	adds	r3, #1
 800057c:	70fb      	strb	r3, [r7, #3]
 800057e:	78fb      	ldrb	r3, [r7, #3]
 8000580:	2b04      	cmp	r3, #4
 8000582:	d9bd      	bls.n	8000500 <InitTasksStack+0x48>
	}
}
 8000584:	bf00      	nop
 8000586:	bf00      	nop
 8000588:	370c      	adds	r7, #12
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	20000040 	.word	0x20000040
 8000598:	2001f000 	.word	0x2001f000
 800059c:	20020000 	.word	0x20020000
 80005a0:	2001fc00 	.word	0x2001fc00
 80005a4:	2001f800 	.word	0x2001f800
 80005a8:	2001f400 	.word	0x2001f400
 80005ac:	08000859 	.word	0x08000859
 80005b0:	08000941 	.word	0x08000941
 80005b4:	08000957 	.word	0x08000957
 80005b8:	0800096d 	.word	0x0800096d
 80005bc:	08000981 	.word	0x08000981

080005c0 <Stack_voidEnableSystenFaultsExcp>:
		}
	}
}
*/
void Stack_voidEnableSystenFaultsExcp(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
	SCB->SCB_SHCSR|=(0b111<<16);/*16 Memmanage fault,17 Bus fault ,18 usage fault enable all */
 80005c4:	4b06      	ldr	r3, [pc, #24]	; (80005e0 <Stack_voidEnableSystenFaultsExcp+0x20>)
 80005c6:	f8d3 3d1c 	ldr.w	r3, [r3, #3356]	; 0xd1c
 80005ca:	4a05      	ldr	r2, [pc, #20]	; (80005e0 <Stack_voidEnableSystenFaultsExcp+0x20>)
 80005cc:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80005d0:	f8c2 3d1c 	str.w	r3, [r2, #3356]	; 0xd1c
}
 80005d4:	bf00      	nop
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	e000e008 	.word	0xe000e008

080005e4 <_void2SavePSPValue>:
/******************************HELPER FUNICTIONS*********************************************/
void _void2SavePSPValue(uint32_t Copy_u32PSPval)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b083      	sub	sp, #12
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
	UserTasks[CurrenTask].PSPValue=Copy_u32PSPval;
 80005ec:	4b06      	ldr	r3, [pc, #24]	; (8000608 <_void2SavePSPValue+0x24>)
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	4a06      	ldr	r2, [pc, #24]	; (800060c <_void2SavePSPValue+0x28>)
 80005f2:	011b      	lsls	r3, r3, #4
 80005f4:	4413      	add	r3, r2
 80005f6:	687a      	ldr	r2, [r7, #4]
 80005f8:	601a      	str	r2, [r3, #0]
}
 80005fa:	bf00      	nop
 80005fc:	370c      	adds	r7, #12
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	20000020 	.word	0x20000020
 800060c:	20000040 	.word	0x20000040

08000610 <_voidUPdatenextFunction>:
void _voidUPdatenextFunction(void)
{
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
	uint8_t Local_u8TaskCounter;
	for(Local_u8TaskCounter=0;Local_u8TaskCounter < MAX_TASK_NUM;Local_u8TaskCounter++)
 8000616:	2300      	movs	r3, #0
 8000618:	71fb      	strb	r3, [r7, #7]
 800061a:	e022      	b.n	8000662 <_voidUPdatenextFunction+0x52>
	{
		CurrenTask++;
 800061c:	4b1c      	ldr	r3, [pc, #112]	; (8000690 <_voidUPdatenextFunction+0x80>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	3301      	adds	r3, #1
 8000622:	b2da      	uxtb	r2, r3
 8000624:	4b1a      	ldr	r3, [pc, #104]	; (8000690 <_voidUPdatenextFunction+0x80>)
 8000626:	701a      	strb	r2, [r3, #0]
		CurrenTask %=MAX_TASK_NUM;
 8000628:	4b19      	ldr	r3, [pc, #100]	; (8000690 <_voidUPdatenextFunction+0x80>)
 800062a:	781a      	ldrb	r2, [r3, #0]
 800062c:	4b19      	ldr	r3, [pc, #100]	; (8000694 <_voidUPdatenextFunction+0x84>)
 800062e:	fba3 1302 	umull	r1, r3, r3, r2
 8000632:	0899      	lsrs	r1, r3, #2
 8000634:	460b      	mov	r3, r1
 8000636:	009b      	lsls	r3, r3, #2
 8000638:	440b      	add	r3, r1
 800063a:	1ad3      	subs	r3, r2, r3
 800063c:	b2da      	uxtb	r2, r3
 800063e:	4b14      	ldr	r3, [pc, #80]	; (8000690 <_voidUPdatenextFunction+0x80>)
 8000640:	701a      	strb	r2, [r3, #0]
		if((UserTasks[CurrenTask].CurrentState==Ready_State)&&(CurrenTask!=0U))
 8000642:	4b13      	ldr	r3, [pc, #76]	; (8000690 <_voidUPdatenextFunction+0x80>)
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	4a14      	ldr	r2, [pc, #80]	; (8000698 <_voidUPdatenextFunction+0x88>)
 8000648:	011b      	lsls	r3, r3, #4
 800064a:	4413      	add	r3, r2
 800064c:	3308      	adds	r3, #8
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d103      	bne.n	800065c <_voidUPdatenextFunction+0x4c>
 8000654:	4b0e      	ldr	r3, [pc, #56]	; (8000690 <_voidUPdatenextFunction+0x80>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d106      	bne.n	800066a <_voidUPdatenextFunction+0x5a>
	for(Local_u8TaskCounter=0;Local_u8TaskCounter < MAX_TASK_NUM;Local_u8TaskCounter++)
 800065c:	79fb      	ldrb	r3, [r7, #7]
 800065e:	3301      	adds	r3, #1
 8000660:	71fb      	strb	r3, [r7, #7]
 8000662:	79fb      	ldrb	r3, [r7, #7]
 8000664:	2b04      	cmp	r3, #4
 8000666:	d9d9      	bls.n	800061c <_voidUPdatenextFunction+0xc>
 8000668:	e000      	b.n	800066c <_voidUPdatenextFunction+0x5c>
		{
			/*cheak if any task is ready excluding the Idle task*/
			break;
 800066a:	bf00      	nop
		}
	}
	if(UserTasks[CurrenTask].CurrentState !=Ready_State)
 800066c:	4b08      	ldr	r3, [pc, #32]	; (8000690 <_voidUPdatenextFunction+0x80>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	4a09      	ldr	r2, [pc, #36]	; (8000698 <_voidUPdatenextFunction+0x88>)
 8000672:	011b      	lsls	r3, r3, #4
 8000674:	4413      	add	r3, r2
 8000676:	3308      	adds	r3, #8
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d002      	beq.n	8000684 <_voidUPdatenextFunction+0x74>
	{
		CurrenTask=0;/*All tasks are blocked*/
 800067e:	4b04      	ldr	r3, [pc, #16]	; (8000690 <_voidUPdatenextFunction+0x80>)
 8000680:	2200      	movs	r2, #0
 8000682:	701a      	strb	r2, [r3, #0]
	}

}
 8000684:	bf00      	nop
 8000686:	370c      	adds	r7, #12
 8000688:	46bd      	mov	sp, r7
 800068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068e:	4770      	bx	lr
 8000690:	20000020 	.word	0x20000020
 8000694:	cccccccd 	.word	0xcccccccd
 8000698:	20000040 	.word	0x20000040

0800069c <_u32GetCurrentPSPValue>:
uint32_t _u32GetCurrentPSPValue(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
	return UserTasks[CurrenTask].PSPValue;
 80006a0:	4b05      	ldr	r3, [pc, #20]	; (80006b8 <_u32GetCurrentPSPValue+0x1c>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	4a05      	ldr	r2, [pc, #20]	; (80006bc <_u32GetCurrentPSPValue+0x20>)
 80006a6:	011b      	lsls	r3, r3, #4
 80006a8:	4413      	add	r3, r2
 80006aa:	681b      	ldr	r3, [r3, #0]
}
 80006ac:	4618      	mov	r0, r3
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	20000020 	.word	0x20000020
 80006bc:	20000040 	.word	0x20000040

080006c0 <Stack_voidChangeToPSP>:
/**************************************************************************/
__attribute__((naked)) void Stack_voidChangeToPSP(void)
{
	/*1- Init PSP with value of */
	__asm volatile("PUSH {LR}");
 80006c0:	b500      	push	{lr}
	__asm volatile("BL	_u32GetCurrentPSPValue");
 80006c2:	f7ff ffeb 	bl	800069c <_u32GetCurrentPSPValue>
	__asm volatile("MSR PSP,R0");
 80006c6:	f380 8809 	msr	PSP, r0
	__asm volatile("POP {LR}");
 80006ca:	f85d eb04 	ldr.w	lr, [sp], #4
	/*2- change sp to psp using CONTROL register*/
	__asm volatile("MOV R0,#0x02");
 80006ce:	f04f 0002 	mov.w	r0, #2
	__asm volatile("MSR CONTROL,R0");
 80006d2:	f380 8814 	msr	CONTROL, r0
	/*return*/
	__asm volatile("BX LR");
 80006d6:	4770      	bx	lr
}
 80006d8:	bf00      	nop

080006da <Stack_voidSchedulerStackInit>:
	/*return*/
	__asm volatile("BX LR");
}
__attribute__ ((naked)) void Stack_voidSchedulerStackInit(uint32_t Copy_u32SchedulerTOS)
{
	__asm volatile("MSR MSP,R0");
 80006da:	f380 8808 	msr	MSP, r0
	/* can use this instead
	 * __asm volatile("MSR MSP ,%0"::"r"(Copy_u32SchedulerTOS));
	 */

	/*return*/
	__asm volatile("BX LR");
 80006de:	4770      	bx	lr
}
 80006e0:	bf00      	nop
	...

080006e4 <STK_voidInit>:

void STK_voidInit(uint32_t Copy_u32Tickhz)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b085      	sub	sp, #20
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
	/*Calculate the requried number of ticks*/
	uint32_t Local_u32ReloadVal= SYSTICK_TIM_CLK/ Copy_u32Tickhz;
 80006ec:	4a11      	ldr	r2, [pc, #68]	; (8000734 <STK_voidInit+0x50>)
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80006f4:	60fb      	str	r3, [r7, #12]

	/*Decrement by one to consider the Multi-shot timer*/
	Local_u32ReloadVal--;
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	3b01      	subs	r3, #1
 80006fa:	60fb      	str	r3, [r7, #12]

	SYSTICK->STK_LOAD=Local_u32ReloadVal;
 80006fc:	4a0e      	ldr	r2, [pc, #56]	; (8000738 <STK_voidInit+0x54>)
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	6053      	str	r3, [r2, #4]

	/*Enable systick exception*/
	SYSTICK->STK_CTRL |=1<<1;
 8000702:	4b0d      	ldr	r3, [pc, #52]	; (8000738 <STK_voidInit+0x54>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	4a0c      	ldr	r2, [pc, #48]	; (8000738 <STK_voidInit+0x54>)
 8000708:	f043 0302 	orr.w	r3, r3, #2
 800070c:	6013      	str	r3, [r2, #0]

	/*Set clock source*/
	SYSTICK->STK_CTRL |=1<<2;
 800070e:	4b0a      	ldr	r3, [pc, #40]	; (8000738 <STK_voidInit+0x54>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	4a09      	ldr	r2, [pc, #36]	; (8000738 <STK_voidInit+0x54>)
 8000714:	f043 0304 	orr.w	r3, r3, #4
 8000718:	6013      	str	r3, [r2, #0]

	/*Enable the systick timer*/
	SYSTICK->STK_CTRL |=1<<0;
 800071a:	4b07      	ldr	r3, [pc, #28]	; (8000738 <STK_voidInit+0x54>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	4a06      	ldr	r2, [pc, #24]	; (8000738 <STK_voidInit+0x54>)
 8000720:	f043 0301 	orr.w	r3, r3, #1
 8000724:	6013      	str	r3, [r2, #0]
}
 8000726:	bf00      	nop
 8000728:	3714      	adds	r7, #20
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	00f42400 	.word	0x00f42400
 8000738:	e000e010 	.word	0xe000e010

0800073c <PendSV_Handler>:

__attribute__((naked)) void PendSV_Handler(void)
{
	/*1- Save context of Current task*/
			/*1-Get Current runinng task's PSP value*/
			__asm volatile("MRS R0,PSP");
 800073c:	f3ef 8009 	mrs	r0, PSP
			/*2-using that psp ,*/
			__asm volatile("STMDB R0!,{R4-R11}");
 8000740:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
			/*3-Saave current value of PSP*/
			__asm volatile("PUSH {LR}");
 8000744:	b500      	push	{lr}
			__asm volatile("BL _void2SavePSPValue");
 8000746:	f7ff ff4d 	bl	80005e4 <_void2SavePSPValue>
		/*2- Retrieve context of nsxt task*/
			/*1- Decide the next task to run*/
			__asm volatile("BL _voidUPdatenextFunction");
 800074a:	f7ff ff61 	bl	8000610 <_voidUPdatenextFunction>
			/*2-Get its PSP Value*/
			__asm volatile("BL _u32GetCurrentPSPValue");
 800074e:	f7ff ffa5 	bl	800069c <_u32GetCurrentPSPValue>
			__asm volatile("POP {LR}");
 8000752:	f85d eb04 	ldr.w	lr, [sp], #4
			/*3- using the psp value , retrieve SF2(R4-->R11)*/
			__asm volatile("LDM R0!,{R4-R11}");
 8000756:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
			/*4- Update PSP Value*/
			__asm volatile("MSR PSP ,R0");
 800075a:	f380 8809 	msr	PSP, r0
		/*3- return*/
		__asm volatile("BX LR");
 800075e:	4770      	bx	lr
}
 8000760:	bf00      	nop
	...

08000764 <UnblockTasks>:
void UnblockTasks(void)
{
 8000764:	b480      	push	{r7}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
	uint8_t local_u8TaskCounter;
	for (local_u8TaskCounter = 1u; local_u8TaskCounter < MAX_TASK_NUM; ++local_u8TaskCounter)
 800076a:	2301      	movs	r3, #1
 800076c:	71fb      	strb	r3, [r7, #7]
 800076e:	e01b      	b.n	80007a8 <UnblockTasks+0x44>
	{
		if (UserTasks[local_u8TaskCounter].CurrentState==BlockedState)
 8000770:	79fb      	ldrb	r3, [r7, #7]
 8000772:	4a12      	ldr	r2, [pc, #72]	; (80007bc <UnblockTasks+0x58>)
 8000774:	011b      	lsls	r3, r3, #4
 8000776:	4413      	add	r3, r2
 8000778:	3308      	adds	r3, #8
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	2b01      	cmp	r3, #1
 800077e:	d110      	bne.n	80007a2 <UnblockTasks+0x3e>
		{
			if(UserTasks[local_u8TaskCounter].BlockCount == GlobalTickCounter)
 8000780:	79fb      	ldrb	r3, [r7, #7]
 8000782:	4a0e      	ldr	r2, [pc, #56]	; (80007bc <UnblockTasks+0x58>)
 8000784:	011b      	lsls	r3, r3, #4
 8000786:	4413      	add	r3, r2
 8000788:	3304      	adds	r3, #4
 800078a:	681a      	ldr	r2, [r3, #0]
 800078c:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <UnblockTasks+0x5c>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	429a      	cmp	r2, r3
 8000792:	d106      	bne.n	80007a2 <UnblockTasks+0x3e>
			{
				UserTasks[local_u8TaskCounter].CurrentState = Ready_State;
 8000794:	79fb      	ldrb	r3, [r7, #7]
 8000796:	4a09      	ldr	r2, [pc, #36]	; (80007bc <UnblockTasks+0x58>)
 8000798:	011b      	lsls	r3, r3, #4
 800079a:	4413      	add	r3, r2
 800079c:	3308      	adds	r3, #8
 800079e:	2200      	movs	r2, #0
 80007a0:	701a      	strb	r2, [r3, #0]
	for (local_u8TaskCounter = 1u; local_u8TaskCounter < MAX_TASK_NUM; ++local_u8TaskCounter)
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	3301      	adds	r3, #1
 80007a6:	71fb      	strb	r3, [r7, #7]
 80007a8:	79fb      	ldrb	r3, [r7, #7]
 80007aa:	2b04      	cmp	r3, #4
 80007ac:	d9e0      	bls.n	8000770 <UnblockTasks+0xc>
			}
		}
	}
}
 80007ae:	bf00      	nop
 80007b0:	bf00      	nop
 80007b2:	370c      	adds	r7, #12
 80007b4:	46bd      	mov	sp, r7
 80007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ba:	4770      	bx	lr
 80007bc:	20000040 	.word	0x20000040
 80007c0:	20000090 	.word	0x20000090

080007c4 <SysTick_Handler>:
void SysTick_Handler(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
	/*1- Update Global Tick Count*/
	GlobalTickCounter++;
 80007c8:	4b08      	ldr	r3, [pc, #32]	; (80007ec <SysTick_Handler+0x28>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	3301      	adds	r3, #1
 80007ce:	4a07      	ldr	r2, [pc, #28]	; (80007ec <SysTick_Handler+0x28>)
 80007d0:	6013      	str	r3, [r2, #0]

	/*2- Unblock Tasks*/
	UnblockTasks();
 80007d2:	f7ff ffc7 	bl	8000764 <UnblockTasks>

	/*3- Pend pendSV*/
	SET_PENDSV_PENDING_FLAG;
 80007d6:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <SysTick_Handler+0x2c>)
 80007d8:	f8d3 3cfc 	ldr.w	r3, [r3, #3324]	; 0xcfc
 80007dc:	4a04      	ldr	r2, [pc, #16]	; (80007f0 <SysTick_Handler+0x2c>)
 80007de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e2:	f8c2 3cfc 	str.w	r3, [r2, #3324]	; 0xcfc
}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	20000090 	.word	0x20000090
 80007f0:	e000e008 	.word	0xe000e008

080007f4 <TaskDelay>:
void TaskDelay(uint32_t Copy_u32BlockingCount)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]

	if(CurrenTask != 0U)
 80007fc:	4b12      	ldr	r3, [pc, #72]	; (8000848 <TaskDelay+0x54>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d01b      	beq.n	800083c <TaskDelay+0x48>
	{
		/*Update Task blocking period*/
		UserTasks[CurrenTask].BlockCount = Copy_u32BlockingCount + GlobalTickCounter;
 8000804:	4b11      	ldr	r3, [pc, #68]	; (800084c <TaskDelay+0x58>)
 8000806:	681a      	ldr	r2, [r3, #0]
 8000808:	4b0f      	ldr	r3, [pc, #60]	; (8000848 <TaskDelay+0x54>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	4618      	mov	r0, r3
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	441a      	add	r2, r3
 8000812:	490f      	ldr	r1, [pc, #60]	; (8000850 <TaskDelay+0x5c>)
 8000814:	0103      	lsls	r3, r0, #4
 8000816:	440b      	add	r3, r1
 8000818:	3304      	adds	r3, #4
 800081a:	601a      	str	r2, [r3, #0]

		/*Update Task state*/
		UserTasks[CurrenTask].CurrentState=BlockedState;
 800081c:	4b0a      	ldr	r3, [pc, #40]	; (8000848 <TaskDelay+0x54>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	4a0b      	ldr	r2, [pc, #44]	; (8000850 <TaskDelay+0x5c>)
 8000822:	011b      	lsls	r3, r3, #4
 8000824:	4413      	add	r3, r2
 8000826:	3308      	adds	r3, #8
 8000828:	2201      	movs	r2, #1
 800082a:	701a      	strb	r2, [r3, #0]
		/*Call the scheduler by pending the PendSV*/
		SET_PENDSV_PENDING_FLAG;
 800082c:	4b09      	ldr	r3, [pc, #36]	; (8000854 <TaskDelay+0x60>)
 800082e:	f8d3 3cfc 	ldr.w	r3, [r3, #3324]	; 0xcfc
 8000832:	4a08      	ldr	r2, [pc, #32]	; (8000854 <TaskDelay+0x60>)
 8000834:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000838:	f8c2 3cfc 	str.w	r3, [r2, #3324]	; 0xcfc
	}
}
 800083c:	bf00      	nop
 800083e:	370c      	adds	r7, #12
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr
 8000848:	20000020 	.word	0x20000020
 800084c:	20000090 	.word	0x20000090
 8000850:	20000040 	.word	0x20000040
 8000854:	e000e008 	.word	0xe000e008

08000858 <IdleTaskHandler>:

void IdleTaskHandler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
	while(1);
 800085c:	e7fe      	b.n	800085c <IdleTaskHandler+0x4>
	...

08000860 <RCC_voidAHB1EnablePerapheralClock>:
	return Local_ErrorState;
}


void RCC_voidAHB1EnablePerapheralClock(AHB1peripheral_ty Copy_Perapheral)
{
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
 8000866:	4603      	mov	r3, r0
 8000868:	71fb      	strb	r3, [r7, #7]
	RCC->RCC_AHB1ENR |=(ONE_BIT_MASKING<<Copy_Perapheral);
 800086a:	4b07      	ldr	r3, [pc, #28]	; (8000888 <RCC_voidAHB1EnablePerapheralClock+0x28>)
 800086c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800086e:	79fb      	ldrb	r3, [r7, #7]
 8000870:	2101      	movs	r1, #1
 8000872:	fa01 f303 	lsl.w	r3, r1, r3
 8000876:	4904      	ldr	r1, [pc, #16]	; (8000888 <RCC_voidAHB1EnablePerapheralClock+0x28>)
 8000878:	4313      	orrs	r3, r2
 800087a:	630b      	str	r3, [r1, #48]	; 0x30
}
 800087c:	bf00      	nop
 800087e:	370c      	adds	r7, #12
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr
 8000888:	40023800 	.word	0x40023800

0800088c <main>:
{
	uint32_t i;
	for (i = 0; i < Count; ++i);
}
int main(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b088      	sub	sp, #32
 8000890:	af00      	add	r7, sp, #0
	GPIO_PinConfig_t Chanel1=
 8000892:	f107 0318 	add.w	r3, r7, #24
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	f8c3 2003 	str.w	r2, [r3, #3]
 800089e:	2302      	movs	r3, #2
 80008a0:	763b      	strb	r3, [r7, #24]
 80008a2:	2308      	movs	r3, #8
 80008a4:	767b      	strb	r3, [r7, #25]
 80008a6:	2301      	movs	r3, #1
 80008a8:	76bb      	strb	r3, [r7, #26]
			.speed = SPEED_LOW,
			.OutputType = PUSH_PULL,
			.PullType = NOPULL,
			.mode = OUTPUT,
	};
	GPIO_PinConfig_t Chanel2=
 80008aa:	f107 0310 	add.w	r3, r7, #16
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
 80008b2:	f8c3 2003 	str.w	r2, [r3, #3]
 80008b6:	2302      	movs	r3, #2
 80008b8:	743b      	strb	r3, [r7, #16]
 80008ba:	2306      	movs	r3, #6
 80008bc:	747b      	strb	r3, [r7, #17]
 80008be:	2301      	movs	r3, #1
 80008c0:	74bb      	strb	r3, [r7, #18]
				.speed = SPEED_LOW,
				.OutputType = PUSH_PULL,
				.PullType = NOPULL,
				.mode = OUTPUT,
		};
	GPIO_PinConfig_t Chanel3=
 80008c2:	f107 0308 	add.w	r3, r7, #8
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	f8c3 2003 	str.w	r2, [r3, #3]
 80008ce:	2302      	movs	r3, #2
 80008d0:	723b      	strb	r3, [r7, #8]
 80008d2:	2305      	movs	r3, #5
 80008d4:	727b      	strb	r3, [r7, #9]
 80008d6:	2301      	movs	r3, #1
 80008d8:	72bb      	strb	r3, [r7, #10]
				.speed = SPEED_LOW,
				.OutputType = PUSH_PULL,
				.PullType = NOPULL,
				.mode = OUTPUT,
		};
	GPIO_PinConfig_t Chanel4=
 80008da:	463b      	mov	r3, r7
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	f8c3 2003 	str.w	r2, [r3, #3]
 80008e4:	2302      	movs	r3, #2
 80008e6:	703b      	strb	r3, [r7, #0]
 80008e8:	2309      	movs	r3, #9
 80008ea:	707b      	strb	r3, [r7, #1]
 80008ec:	2301      	movs	r3, #1
 80008ee:	70bb      	strb	r3, [r7, #2]
				.OutputType = PUSH_PULL,
				.PullType = NOPULL,
				.mode = OUTPUT,
		};

	RCC_voidAHB1EnablePerapheralClock(AHB1_GPIOC);
 80008f0:	2002      	movs	r0, #2
 80008f2:	f7ff ffb5 	bl	8000860 <RCC_voidAHB1EnablePerapheralClock>
	GPIO_u8PinInit(&Chanel1);
 80008f6:	f107 0318 	add.w	r3, r7, #24
 80008fa:	4618      	mov	r0, r3
 80008fc:	f7ff fc82 	bl	8000204 <GPIO_u8PinInit>
	GPIO_u8PinInit(&Chanel2);
 8000900:	f107 0310 	add.w	r3, r7, #16
 8000904:	4618      	mov	r0, r3
 8000906:	f7ff fc7d 	bl	8000204 <GPIO_u8PinInit>
	GPIO_u8PinInit(&Chanel3);
 800090a:	f107 0308 	add.w	r3, r7, #8
 800090e:	4618      	mov	r0, r3
 8000910:	f7ff fc78 	bl	8000204 <GPIO_u8PinInit>
	GPIO_u8PinInit(&Chanel4);
 8000914:	463b      	mov	r3, r7
 8000916:	4618      	mov	r0, r3
 8000918:	f7ff fc74 	bl	8000204 <GPIO_u8PinInit>


	Stack_voidEnableSystenFaultsExcp();
 800091c:	f7ff fe50 	bl	80005c0 <Stack_voidEnableSystenFaultsExcp>

	STK_voidInit(1000);
 8000920:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000924:	f7ff fede 	bl	80006e4 <STK_voidInit>
	Stack_voidSchedulerStackInit(SECED_STACK_START);
 8000928:	4804      	ldr	r0, [pc, #16]	; (800093c <main+0xb0>)
 800092a:	f7ff fed6 	bl	80006da <Stack_voidSchedulerStackInit>
	InitTasksStack();
 800092e:	f7ff fdc3 	bl	80004b8 <InitTasksStack>

	Stack_voidChangeToPSP();
 8000932:	f7ff fec5 	bl	80006c0 <Stack_voidChangeToPSP>

	//Stack_voidGoUnprivileged();
	Task1_Handler();
 8000936:	f000 f803 	bl	8000940 <Task1_Handler>
    /* Loop forever */
	for(;;);
 800093a:	e7fe      	b.n	800093a <main+0xae>
 800093c:	2001ec00 	.word	0x2001ec00

08000940 <Task1_Handler>:
}
void Task1_Handler(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
	while(1)
	{
		GPIO_u8TogglePinValue(CHANEL1_PORT, CHANEL1_PIN);
 8000944:	2108      	movs	r1, #8
 8000946:	2002      	movs	r0, #2
 8000948:	f7ff fd8a 	bl	8000460 <GPIO_u8TogglePinValue>
		TaskDelay(1000);
 800094c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000950:	f7ff ff50 	bl	80007f4 <TaskDelay>
		GPIO_u8TogglePinValue(CHANEL1_PORT, CHANEL1_PIN);
 8000954:	e7f6      	b.n	8000944 <Task1_Handler+0x4>

08000956 <Task2_Handler>:
	}
}
void Task2_Handler(void)
{
 8000956:	b580      	push	{r7, lr}
 8000958:	af00      	add	r7, sp, #0
	while(1)
	{
		GPIO_u8TogglePinValue(CHANEL2_PORT, CHANEL2_PIN);
 800095a:	2106      	movs	r1, #6
 800095c:	2002      	movs	r0, #2
 800095e:	f7ff fd7f 	bl	8000460 <GPIO_u8TogglePinValue>
		TaskDelay(500);
 8000962:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000966:	f7ff ff45 	bl	80007f4 <TaskDelay>
		GPIO_u8TogglePinValue(CHANEL2_PORT, CHANEL2_PIN);
 800096a:	e7f6      	b.n	800095a <Task2_Handler+0x4>

0800096c <Task3_Handler>:
	}
}
void Task3_Handler(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
	while(1)
	{
		GPIO_u8TogglePinValue(CHANEL3_PORT, CHANEL3_PIN);
 8000970:	2105      	movs	r1, #5
 8000972:	2002      	movs	r0, #2
 8000974:	f7ff fd74 	bl	8000460 <GPIO_u8TogglePinValue>
		TaskDelay(250);
 8000978:	20fa      	movs	r0, #250	; 0xfa
 800097a:	f7ff ff3b 	bl	80007f4 <TaskDelay>
		GPIO_u8TogglePinValue(CHANEL3_PORT, CHANEL3_PIN);
 800097e:	e7f7      	b.n	8000970 <Task3_Handler+0x4>

08000980 <Task4_Handler>:
	}
}
void Task4_Handler(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
	while(1)
	{
		GPIO_u8TogglePinValue(CHANEL4_PORT, CHANEL4_PIN);
 8000984:	2109      	movs	r1, #9
 8000986:	2002      	movs	r0, #2
 8000988:	f7ff fd6a 	bl	8000460 <GPIO_u8TogglePinValue>
		TaskDelay(125);
 800098c:	207d      	movs	r0, #125	; 0x7d
 800098e:	f7ff ff31 	bl	80007f4 <TaskDelay>
		GPIO_u8TogglePinValue(CHANEL4_PORT, CHANEL4_PIN);
 8000992:	e7f7      	b.n	8000984 <Task4_Handler+0x4>

08000994 <UsageFault_Handler>:
	}
}
void UsageFault_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
	while(1);
 8000998:	e7fe      	b.n	8000998 <UsageFault_Handler+0x4>

0800099a <BusFault_Handler>:
}
void BusFault_Handler(void)
{
 800099a:	b480      	push	{r7}
 800099c:	af00      	add	r7, sp, #0
	while(1);
 800099e:	e7fe      	b.n	800099e <BusFault_Handler+0x4>

080009a0 <MemManage_Handler>:
}
void MemManage_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
	while(1);
 80009a4:	e7fe      	b.n	80009a4 <MemManage_Handler+0x4>
	...

080009a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009a8:	480d      	ldr	r0, [pc, #52]	; (80009e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009aa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80009ac:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009b0:	480c      	ldr	r0, [pc, #48]	; (80009e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80009b2:	490d      	ldr	r1, [pc, #52]	; (80009e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009b4:	4a0d      	ldr	r2, [pc, #52]	; (80009ec <LoopForever+0xe>)
  movs r3, #0
 80009b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009b8:	e002      	b.n	80009c0 <LoopCopyDataInit>

080009ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009be:	3304      	adds	r3, #4

080009c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009c4:	d3f9      	bcc.n	80009ba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009c6:	4a0a      	ldr	r2, [pc, #40]	; (80009f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009c8:	4c0a      	ldr	r4, [pc, #40]	; (80009f4 <LoopForever+0x16>)
  movs r3, #0
 80009ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009cc:	e001      	b.n	80009d2 <LoopFillZerobss>

080009ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009d0:	3204      	adds	r2, #4

080009d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009d4:	d3fb      	bcc.n	80009ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009d6:	f000 f811 	bl	80009fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009da:	f7ff ff57 	bl	800088c <main>

080009de <LoopForever>:

LoopForever:
  b LoopForever
 80009de:	e7fe      	b.n	80009de <LoopForever>
  ldr   r0, =_estack
 80009e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009e8:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 80009ec:	08000a64 	.word	0x08000a64
  ldr r2, =_sbss
 80009f0:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 80009f4:	20000094 	.word	0x20000094

080009f8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009f8:	e7fe      	b.n	80009f8 <ADC_IRQHandler>
	...

080009fc <__libc_init_array>:
 80009fc:	b570      	push	{r4, r5, r6, lr}
 80009fe:	4d0d      	ldr	r5, [pc, #52]	; (8000a34 <__libc_init_array+0x38>)
 8000a00:	4c0d      	ldr	r4, [pc, #52]	; (8000a38 <__libc_init_array+0x3c>)
 8000a02:	1b64      	subs	r4, r4, r5
 8000a04:	10a4      	asrs	r4, r4, #2
 8000a06:	2600      	movs	r6, #0
 8000a08:	42a6      	cmp	r6, r4
 8000a0a:	d109      	bne.n	8000a20 <__libc_init_array+0x24>
 8000a0c:	4d0b      	ldr	r5, [pc, #44]	; (8000a3c <__libc_init_array+0x40>)
 8000a0e:	4c0c      	ldr	r4, [pc, #48]	; (8000a40 <__libc_init_array+0x44>)
 8000a10:	f000 f818 	bl	8000a44 <_init>
 8000a14:	1b64      	subs	r4, r4, r5
 8000a16:	10a4      	asrs	r4, r4, #2
 8000a18:	2600      	movs	r6, #0
 8000a1a:	42a6      	cmp	r6, r4
 8000a1c:	d105      	bne.n	8000a2a <__libc_init_array+0x2e>
 8000a1e:	bd70      	pop	{r4, r5, r6, pc}
 8000a20:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a24:	4798      	blx	r3
 8000a26:	3601      	adds	r6, #1
 8000a28:	e7ee      	b.n	8000a08 <__libc_init_array+0xc>
 8000a2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a2e:	4798      	blx	r3
 8000a30:	3601      	adds	r6, #1
 8000a32:	e7f2      	b.n	8000a1a <__libc_init_array+0x1e>
 8000a34:	08000a5c 	.word	0x08000a5c
 8000a38:	08000a5c 	.word	0x08000a5c
 8000a3c:	08000a5c 	.word	0x08000a5c
 8000a40:	08000a60 	.word	0x08000a60

08000a44 <_init>:
 8000a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a46:	bf00      	nop
 8000a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a4a:	bc08      	pop	{r3}
 8000a4c:	469e      	mov	lr, r3
 8000a4e:	4770      	bx	lr

08000a50 <_fini>:
 8000a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a52:	bf00      	nop
 8000a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a56:	bc08      	pop	{r3}
 8000a58:	469e      	mov	lr, r3
 8000a5a:	4770      	bx	lr
